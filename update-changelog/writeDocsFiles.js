"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeDocsFiles = void 0;
const fs_1 = __importDefault(require("fs"));
async function writeDocsFiles({ version, builder }) {
    const notes = await builder.buildReleaseNotes({ useDocsHeader: true });
    const title = builder.getTitle();
    const content = `+++
title = "${title}"
[_build]
list = false
+++

<!-- Auto generated by update changelog github action -->

${notes}
`;
    const releaseNotesDocsPath = `./docs/sources/release-notes`;
    const filePath = `release-notes-${version.replace(/\./g, '-')}.md`;
    const fullPath = `${releaseNotesDocsPath}/${filePath}`;
    fs_1.default.writeFileSync(fullPath, content, { encoding: 'utf-8' });
    const indexFilePath = `_index.md`;
    const indexFileFullPath = `${releaseNotesDocsPath}/${indexFilePath}`;
    const indexFileContent = fs_1.default.readFileSync(indexFileFullPath, 'utf8');
    const findLatestNotes = indexFileContent.indexOf('- [Release notes for');
    const updatedIndexFileContent = indexFileContent.slice(0, findLatestNotes) +
        `- [Release notes for ${version}]({{< relref "${filePath.replace('.md', '')}" >}})\n` +
        indexFileContent.slice(findLatestNotes);
    fs_1.default.writeFileSync(indexFileFullPath, updatedIndexFileContent, { encoding: 'utf8' });
}
exports.writeDocsFiles = writeDocsFiles;
//# sourceMappingURL=writeDocsFiles.js.map